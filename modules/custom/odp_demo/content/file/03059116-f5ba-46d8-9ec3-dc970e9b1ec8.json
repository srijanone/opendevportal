{
    "_links": {
        "self": {
            "href": ""
        },
        "type": {
            "href": "http:\/\/drupal.org\/rest\/type\/file\/file"
        },
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "href": "http:\/\/default\/user\/1?_format=hal_json"
            }
        ]
    },
    "fid": [
        {
            "value": 1112
        }
    ],
    "uuid": [
        {
            "value": "03059116-f5ba-46d8-9ec3-dc970e9b1ec8"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "_embedded": {
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "_links": {
                    "self": {
                        "href": "http:\/\/default\/user\/1?_format=hal_json"
                    },
                    "type": {
                        "href": "http:\/\/drupal.org\/rest\/type\/user\/user"
                    }
                },
                "uuid": [
                    {
                        "value": "552b2bad-e293-41e8-a461-ee101dd63a91"
                    }
                ]
            }
        ]
    },
    "filename": [
        {
            "value": "dbaas_0_1.yaml"
        }
    ],
    "uri": [
        {
            "value": "public:\/\/2020-11\/dbaas_0_1.yaml",
            "url": "\/sites\/default\/files\/2020-11\/dbaas_0_1.yaml"
        }
    ],
    "filemime": [
        {
            "value": "application\/octet-stream"
        }
    ],
    "filesize": [
        {
            "value": 22100
        }
    ],
    "status": [
        {
            "value": true
        }
    ],
    "created": [
        {
            "value": "2020-11-11T08:24:54+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2020-11-11T08:25:20+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "data": [
        {
            "value": "LS0tDQpzd2FnZ2VyOiAnMi4wJw0KaW5mbzoNCiAgdGl0bGU6IGRiYWFzDQogIHZlcnNpb246IFVua25vd24NCmNvbnN1bWVzOg0KLSBhcHBsaWNhdGlvbi9qc29uDQpwcm9kdWNlczoNCi0gYXBwbGljYXRpb24vanNvbg0KcGF0aHM6DQogICIvIjoNCiAgICBnZXQ6DQogICAgICBvcGVyYXRpb25JZDogZ2V0VmVyc2lvbnMNCiAgICAgIHN1bW1hcnk6IExpc3QgdmVyc2lvbnMNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIExpc3RzIGluZm9ybWF0aW9uIGFib3V0IGFsbCBEYXRhYmFzZSBTZXJ2aWNlIEFQSSB2ZXJzaW9ucy4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDAnOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDAgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoNCiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246IHwtDQogICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICJ2ZXJzaW9ucyI6IFsNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiQ1VSUkVOVCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICJ1cGRhdGVkIjogIjIwMTItMDEtMDFUMDA6MDA6MDBaIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogInYxLjAiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgfQ0KICAiL3YxLjAiOg0KICAgIGdldDoNCiAgICAgIG9wZXJhdGlvbklkOiBnZXRWZXJzaW9uSW5mbw0KICAgICAgc3VtbWFyeTogU2hvdyB2ZXJzaW9uIGRldGFpbHMNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFNob3dzIGRldGFpbHMgZm9yIHRoZSBEYXRhYmFzZSBTZXJ2aWNlIEFQSSB2MS4wLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMic6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMiByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOg0KICAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjogfC0NCiAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgInZlcnNpb25zIjogWw0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJDVVJSRU5UIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInVwZGF0ZWQiOiAiMjAxMi0wOC0wMVQwMDowMDowMFoiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAidjEuMCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICJsaW5rcyI6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwOi8vMjMuMjUzLjIyOC4yMTE6ODc3OS92MS4wLyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICB9DQogICIvdjEuMC97YWNjb3VudElkfS9pbnN0YW5jZXMiOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICBwb3N0Og0KICAgICAgb3BlcmF0aW9uSWQ6IGNyZWF0ZUluc3RhbmNlDQogICAgICBzdW1tYXJ5OiBDcmVhdGUgZGF0YWJhc2UgaW5zdGFuY2UNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIENyZWF0ZXMgYSBkYXRhYmFzZSBpbnN0YW5jZS4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDAnOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDAgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoNCiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246IHwtDQogICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICJpbnN0YW5jZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogIkJVSUxEIiwNCiAgICAgICAgICAgICAgICAgICAgICAidXBkYXRlZCI6ICIyMDEyLTAxLTI1VDIxOjUzOjEwWiIsDQogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAianNvbl9yYWNrX2luc3RhbmNlIiwNCiAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vb3BlbnN0YWNrLmV4YW1wbGUuY29tL3YxLjAvMTIzNC9pbnN0YW5jZXMvZGVhNWEyZjctM2VjNy00NDk2LWFkYWItMGFiYjVhNDJkNjM1IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vaW5zdGFuY2VzL2RlYTVhMmY3LTNlYzctNDQ5Ni1hZGFiLTBhYmI1YTQyZDYzNSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsIjogImJvb2ttYXJrIg0KICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAgICAgICAiY3JlYXRlZCI6ICIyMDEyLTAxLTI1VDIxOjUzOjA5WiIsDQogICAgICAgICAgICAgICAgICAgICAgImhvc3RuYW1lIjogImUwOWFkOWEzZjczMzA5NDY5Y2YxZjQzZDExZTc5NTQ5Y2FmOWFjZjIucmFja3NwYWNlY2xvdWRkYi5jb20iLA0KICAgICAgICAgICAgICAgICAgICAgICJ2b2x1bWUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJzaXplIjogMg0KICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgImZsYXZvciI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL29wZW5zdGFjay5leGFtcGxlLmNvbS9mbGF2b3JzLzEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAiYm9va21hcmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICJkZWE1YTJmNy0zZWM3LTQ0OTYtYWRhYi0wYWJiNWE0MmQ2MzUiDQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0NCiAgICBnZXQ6DQogICAgICBvcGVyYXRpb25JZDogZ2V0SW5zdGFuY2UNCiAgICAgIHN1bW1hcnk6IExpc3QgZGF0YWJhc2UgaW5zdGFuY2VzDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBMaXN0cyBpbmZvcm1hdGlvbiwgaW5jbHVkaW5nIHN0YXR1cywgZm9yIGFsbCBkYXRhYmFzZSBpbnN0YW5jZXMuDQogICAgICBwcm9kdWNlczoNCiAgICAgIC0gYXBwbGljYXRpb24vanNvbg0KICAgICAgcmVzcG9uc2VzOg0KICAgICAgICAnMjAwJzoNCiAgICAgICAgICBkZXNjcmlwdGlvbjogMjAwIHJlc3BvbnNlDQogICAgICAgICAgZXhhbXBsZXM6DQogICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOiB8LQ0KICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAiaW5zdGFuY2VzIjogWw0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1cyI6ICJBQ1RJVkUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJqc29uX3JhY2tfaW5zdGFuY2UiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2luc3RhbmNlcy8yOGQxYjhmMy0xNzJhLTRmNmQtOTgzZC0zNjAyMTUwODQ0NGEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vaW5zdGFuY2VzLzI4ZDFiOGYzLTE3MmEtNGY2ZC05ODNkLTM2MDIxNTA4NDQ0YSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJib29rbWFyayINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZvbHVtZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzaXplIjogMg0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxhdm9yIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxpbmtzIjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vZmxhdm9ycy8xIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJib29rbWFyayINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIyOGQxYjhmMy0xNzJhLTRmNmQtOTgzZC0zNjAyMTUwODQ0NGEiDQogICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiAiQUNUSVZFIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAieG1sX3JhY2tfaW5zdGFuY2UiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2luc3RhbmNlcy84ZmIwODFhZi1mMjM3LTQ0ZjUtODBjYy1iNDZiZTE4NDBjYTkiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vaW5zdGFuY2VzLzhmYjA4MWFmLWYyMzctNDRmNS04MGNjLWI0NmJlMTg0MGNhOSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJib29rbWFyayINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInZvbHVtZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzaXplIjogMg0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiZmxhdm9yIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxpbmtzIjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vZmxhdm9ycy8xIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJib29rbWFyayINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICI4ZmIwODFhZi1mMjM3LTQ0ZjUtODBjYy1iNDZiZTE4NDBjYTkiDQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICB9DQogICIvdjEuMC97YWNjb3VudElkfS9pbnN0YW5jZXMve2luc3RhbmNlSWR9IjoNCiAgICBwYXJhbWV0ZXJzOg0KICAgIC0gbmFtZTogYWNjb3VudElkDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgICAgaW46IHBhdGgNCiAgICAgIHR5cGU6IHN0cmluZw0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgVGhlIGFjY291bnQgSUQgb2YgdGhlIG93bmVyIG9mIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgLSBuYW1lOiBpbnN0YW5jZUlkDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgICAgaW46IHBhdGgNCiAgICAgIHR5cGU6IHN0cmluZw0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgVGhlIGluc3RhbmNlIElEIGZvciB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlIGluc3RhbmNlLg0KICAgIGdldDoNCiAgICAgIG9wZXJhdGlvbklkOiBnZXRJbnN0YW5jZUJ5SWQNCiAgICAgIHN1bW1hcnk6IFNob3cgZGF0YWJhc2UgaW5zdGFuY2UgZGV0YWlscw0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgU2hvd3MgZGF0YWJhc2UgaW5zdGFuY2UgZGV0YWlscy4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDAnOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDAgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoNCiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246IHwtDQogICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICJpbnN0YW5jZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzIjogIkFDVElWRSIsDQogICAgICAgICAgICAgICAgICAgICAgInVwZGF0ZWQiOiAiMjAxMi0wMy0yOFQyMTozNDoyNVoiLA0KICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInhtbF9yYWNrX2luc3RhbmNlIiwNCiAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vb3BlbnN0YWNrLmV4YW1wbGUuY29tL3YxLjAvMTIzNC9pbnN0YW5jZXMvMjQ1MGM3M2YtNzgwNS00YWZlLWE0MmMtNDA5NGFiNDI2NjZiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vaW5zdGFuY2VzLzI0NTBjNzNmLTc4MDUtNGFmZS1hNDJjLTQwOTRhYjQyNjY2YiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsIjogImJvb2ttYXJrIg0KICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAgICAgICAiY3JlYXRlZCI6ICIyMDEyLTAzLTI4VDIxOjMxOjAyWiIsDQogICAgICAgICAgICAgICAgICAgICAgImhvc3RuYW1lIjogImUwOWFkOWEzZjczMzA5NDY5Y2YxZjQzZDExZTc5NTQ5Y2FmOWFjZjIucmFja3NwYWNlY2xvdWRkYi5jb20iLA0KICAgICAgICAgICAgICAgICAgICAgICJ2b2x1bWUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VkIjogMC4xMjQ1NDIyMzYzMjgxMjUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICJzaXplIjogMg0KICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgImZsYXZvciI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogIjEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL29wZW5zdGFjay5leGFtcGxlLmNvbS9mbGF2b3JzLzEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAiYm9va21hcmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICJpZCI6ICIyNDUwYzczZi03ODA1LTRhZmUtYTQyYy00MDk0YWI0MjY2NmIiDQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0NCiAgICBkZWxldGU6DQogICAgICBvcGVyYXRpb25JZDogZGVsZXRlSW5zdGFuY2UNCiAgICAgIHN1bW1hcnk6IERlbGV0ZSBkYXRhYmFzZSBpbnN0YW5jZQ0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgRGVsZXRlcyBhIHNwZWNpZmllZCBkYXRhYmFzZSBpbnN0YW5jZSwgaW5jbHVkaW5nIGFueSBhc3NvY2lhdGVkIGRhdGEuDQogICAgICBwcm9kdWNlczogW10NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMic6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMiByZXNwb25zZQ0KICAiL3YxLjAve2FjY291bnRJZH0vaW5zdGFuY2VzL3tpbnN0YW5jZUlkfS9hY3Rpb24iOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAtIG5hbWU6IGluc3RhbmNlSWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgaW5zdGFuY2UgSUQgZm9yIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UgaW5zdGFuY2UuDQogICAgcG9zdDoNCiAgICAgIG9wZXJhdGlvbklkOiByZXN0YXJ0SW5zdGFuY2UNCiAgICAgIHN1bW1hcnk6IFJlc3RhcnQgaW5zdGFuY2UNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFJlc3RhcnRzIHRoZSBkYXRhYmFzZSBzZXJ2aWNlIG9uIGFuIGluc3RhbmNlLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMic6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMiByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOiB7fQ0KICAiL3YxLjAve2FjY291bnRJZH0vaW5zdGFuY2VzL3tpbnN0YW5jZUlkfS9kYXRhYmFzZXMiOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAtIG5hbWU6IGluc3RhbmNlSWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgaW5zdGFuY2UgSUQgZm9yIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UgaW5zdGFuY2UuDQogICAgcG9zdDoNCiAgICAgIG9wZXJhdGlvbklkOiBjcmVhdGVEYXRhYmFzZQ0KICAgICAgc3VtbWFyeTogQ3JlYXRlIGRhdGFiYXNlDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBDcmVhdGVzIGEgZGF0YWJhc2Ugd2l0aGluIGEgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMic6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMiByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOiB7fQ0KICAgIGdldDoNCiAgICAgIG9wZXJhdGlvbklkOiBnZXREYXRhYmFzZXMNCiAgICAgIHN1bW1hcnk6IExpc3QgaW5zdGFuY2UgZGF0YWJhc2VzDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBMaXN0cyBkYXRhYmFzZXMgZm9yIGEgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMCc6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMCByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOg0KICAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjogfC0NCiAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgImRhdGFiYXNlcyI6IFsNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImFub3RoZXJleGFtcGxlZGIiDQogICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImV4YW1wbGVkYiINCiAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAibmV4dHJvdW5kIg0KICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJzYW1wbGVkYiINCiAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAidGVzdGluZ2RiIg0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgfQ0KICAiL3YxLjAve2FjY291bnRJZH0vaW5zdGFuY2VzL3tpbnN0YW5jZUlkfS9kYXRhYmFzZXMve2RhdGFiYXNlTmFtZX0iOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAtIG5hbWU6IGluc3RhbmNlSWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgaW5zdGFuY2UgSUQgZm9yIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UgaW5zdGFuY2UuDQogICAgLSBuYW1lOiBkYXRhYmFzZU5hbWUNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgbmFtZSBmb3IgdGhlIHNwZWNpZmllZCBkYXRhYmFzZS4NCiAgICBkZWxldGU6DQogICAgICBvcGVyYXRpb25JZDogZGVsZXRlRGF0YWJhc2UNCiAgICAgIHN1bW1hcnk6IERlbGV0ZSBkYXRhYmFzZQ0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgRGVsZXRlcyBhIHNwZWNpZmllZCBkYXRhYmFzZS4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDInOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDIgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoge30NCiAgIi92MS4wL3thY2NvdW50SWR9L2luc3RhbmNlcy97aW5zdGFuY2VJZH0vdXNlcnMiOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICAtIG5hbWU6IGluc3RhbmNlSWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgaW5zdGFuY2UgSUQgZm9yIHRoZSBzcGVjaWZpZWQgZGF0YWJhc2UgaW5zdGFuY2UuDQogICAgcG9zdDoNCiAgICAgIG9wZXJhdGlvbklkOiBjcmVhdGVVc2VyDQogICAgICBzdW1tYXJ5OiBDcmVhdGUgdXNlcg0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgQ3JlYXRlcyBhIHVzZXIgZm9yIGEgc3BlY2lmaWVkIGRhdGFiYXNlIGluc3RhbmNlLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMic6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMiByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOiB7fQ0KICAgIGdldDoNCiAgICAgIG9wZXJhdGlvbklkOiBnZXRVc2Vycw0KICAgICAgc3VtbWFyeTogTGlzdCBkYXRhYmFzZSBpbnN0YW5jZSB1c2Vycw0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgTGlzdHMgdGhlIHVzZXJzIGluIGEgc3BlY2lmaWVkIGRhdGFiYXNlIGluc3RhbmNlLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMCc6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMCByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOg0KICAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjogfC0NCiAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgInVzZXJzIjogWw0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGJ1c2VyMyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhYmFzZXMiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0YWJhc2VBIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRidXNlcjQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YWJhc2VzIjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGFiYXNlQiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0YWJhc2VDIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICB9DQogICIvdjEuMC97YWNjb3VudElkfS9pbnN0YW5jZXMve2luc3RhbmNlSWR9L3VzZXJzL3tuYW1lfSI6DQogICAgcGFyYW1ldGVyczoNCiAgICAtIG5hbWU6IGFjY291bnRJZA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICAgIGluOiBwYXRoDQogICAgICB0eXBlOiBzdHJpbmcNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFRoZSBhY2NvdW50IElEIG9mIHRoZSBvd25lciBvZiB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgIC0gbmFtZTogaW5zdGFuY2VJZA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICAgIGluOiBwYXRoDQogICAgICB0eXBlOiBzdHJpbmcNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFRoZSBpbnN0YW5jZSBJRCBmb3IgdGhlIHNwZWNpZmllZCBkYXRhYmFzZSBpbnN0YW5jZS4NCiAgICAtIG5hbWU6IG5hbWUNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgbmFtZSBmb3IgdGhlIHNwZWNpZmllZCB1c2VyLg0KICAgIGRlbGV0ZToNCiAgICAgIG9wZXJhdGlvbklkOiBkZWxldGVVc2VyDQogICAgICBzdW1tYXJ5OiBEZWxldGUgdXNlcg0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgRGVsZXRlcyBhIHNwZWNpZmllZCB1c2VyIGZvciBhIHNwZWNpZmllZCBkYXRhYmFzZSBpbnN0YW5jZS4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDInOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDIgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoge30NCiAgIi92MS4wL3thY2NvdW50SWR9L2luc3RhbmNlcy97aW5zdGFuY2VJZH0vcm9vdCI6DQogICAgcGFyYW1ldGVyczoNCiAgICAtIG5hbWU6IGFjY291bnRJZA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICAgIGluOiBwYXRoDQogICAgICB0eXBlOiBzdHJpbmcNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFRoZSBhY2NvdW50IElEIG9mIHRoZSBvd25lciBvZiB0aGUgc3BlY2lmaWVkIGluc3RhbmNlLg0KICAgIC0gbmFtZTogaW5zdGFuY2VJZA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICAgIGluOiBwYXRoDQogICAgICB0eXBlOiBzdHJpbmcNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFRoZSBpbnN0YW5jZSBJRCBmb3IgdGhlIHNwZWNpZmllZCBkYXRhYmFzZSBpbnN0YW5jZS4NCiAgICBwb3N0Og0KICAgICAgb3BlcmF0aW9uSWQ6IGNyZWF0ZVJvb3QNCiAgICAgIHN1bW1hcnk6IEVuYWJsZSByb290IHVzZXINCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIEVuYWJsZXMgdGhlIHJvb3QgdXNlciBmb3IgYSBzcGVjaWZpZWQgZGF0YWJhc2UgaW5zdGFuY2UgYW5kIHJldHVybnMgdGhlIHJvb3QgcGFzc3dvcmQuDQogICAgICBwcm9kdWNlczoNCiAgICAgIC0gYXBwbGljYXRpb24vanNvbg0KICAgICAgcmVzcG9uc2VzOg0KICAgICAgICAnMjAwJzoNCiAgICAgICAgICBkZXNjcmlwdGlvbjogMjAwIHJlc3BvbnNlDQogICAgICAgICAgZXhhbXBsZXM6DQogICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOiB8LQ0KICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAidXNlciI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAicGFzc3dvcmQiOiAic2VjcmV0c2VjcmV0IiwNCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyb290Ig0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgZ2V0Og0KICAgICAgb3BlcmF0aW9uSWQ6IGlzUm9vdEVuYWJsZWQNCiAgICAgIHN1bW1hcnk6IFNob3cgcm9vdC1lbmFibGVkIHN0YXR1cyBmb3IgZGF0YWJhc2UgaW5zdGFuY2UNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFNob3dzIHJvb3QtZW5hYmxlZCBzdGF0dXMgZm9yIGEgZGF0YWJhc2UgaW5zdGFuY2UuDQogICAgICBwcm9kdWNlczoNCiAgICAgIC0gYXBwbGljYXRpb24vanNvbg0KICAgICAgcmVzcG9uc2VzOg0KICAgICAgICAnMjAwJzoNCiAgICAgICAgICBkZXNjcmlwdGlvbjogMjAwIHJlc3BvbnNlDQogICAgICAgICAgZXhhbXBsZXM6DQogICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOiB8LQ0KICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAicm9vdEVuYWJsZWQiOiB0cnVlDQogICAgICAgICAgICAgIH0NCiAgIi92MS4wL3thY2NvdW50SWR9L2ZsYXZvcnMiOg0KICAgIHBhcmFtZXRlcnM6DQogICAgLSBuYW1lOiBhY2NvdW50SWQNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICBpbjogcGF0aA0KICAgICAgdHlwZTogc3RyaW5nDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBUaGUgYWNjb3VudCBJRCBvZiB0aGUgb3duZXIgb2YgdGhlIHNwZWNpZmllZCBpbnN0YW5jZS4NCiAgICBnZXQ6DQogICAgICBvcGVyYXRpb25JZDogZ2V0Rmxhdm9ycw0KICAgICAgc3VtbWFyeTogTGlzdCBmbGF2b3JzDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBMaXN0cyBpbmZvcm1hdGlvbiBmb3IgYWxsIGF2YWlsYWJsZSBmbGF2b3JzLg0KICAgICAgcHJvZHVjZXM6DQogICAgICAtIGFwcGxpY2F0aW9uL2pzb24NCiAgICAgIHJlc3BvbnNlczoNCiAgICAgICAgJzIwMCc6DQogICAgICAgICAgZGVzY3JpcHRpb246IDIwMCByZXNwb25zZQ0KICAgICAgICAgIGV4YW1wbGVzOg0KICAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjogfC0NCiAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgImZsYXZvcnMiOiBbDQogICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAicmFtIjogNTEyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL29wZW5zdGFjay5leGFtcGxlLmNvbS9mbGF2b3JzLzEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAiYm9va21hcmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm0xLnRpbnkiDQogICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJyYW0iOiAxMDI0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL29wZW5zdGFjay5leGFtcGxlLmNvbS9mbGF2b3JzLzIiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAiYm9va21hcmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm0xLnNtYWxsIg0KICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAicmFtIjogMjA0OCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogMywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImxpbmtzIjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vb3BlbnN0YWNrLmV4YW1wbGUuY29tL3YxLjAvMTIzNC9mbGF2b3JzLzMiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAic2VsZiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vZmxhdm9ycy8zIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsIjogImJvb2ttYXJrIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJtMS5tZWRpdW0iDQogICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJyYW0iOiA0MDk2LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiaWQiOiA0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAibGlua3MiOiBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvNCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlbCI6ICJzZWxmIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL29wZW5zdGFjay5leGFtcGxlLmNvbS9mbGF2b3JzLzQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWwiOiAiYm9va21hcmsiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm0xLmxhcmdlIg0KICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgfQ0KICAiL3YxLjAve2FjY291bnRJZH0vZmxhdm9ycy97Zmxhdm9ySWR9IjoNCiAgICBwYXJhbWV0ZXJzOg0KICAgIC0gbmFtZTogYWNjb3VudElkDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgICAgaW46IHBhdGgNCiAgICAgIHR5cGU6IHN0cmluZw0KICAgICAgZGVzY3JpcHRpb246IHwNCiAgICAgICAgVGhlIGFjY291bnQgSUQgb2YgdGhlIG93bmVyIG9mIHRoZSBzcGVjaWZpZWQgaW5zdGFuY2UuDQogICAgLSBuYW1lOiBmbGF2b3JJZA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICAgIGluOiBwYXRoDQogICAgICB0eXBlOiBzdHJpbmcNCiAgICAgIGRlc2NyaXB0aW9uOiB8DQogICAgICAgIFRoZSBmbGF2b3IgSUQgZm9yIHRoZSBzcGVjaWZpZWQgZmxhdm9yLg0KICAgIGdldDoNCiAgICAgIG9wZXJhdGlvbklkOiBnZXRGbGF2b3JCeUlkDQogICAgICBzdW1tYXJ5OiBTaG93IGZsYXZvciBkZXRhaWxzDQogICAgICBkZXNjcmlwdGlvbjogfA0KICAgICAgICBTaG93cyBmbGF2b3IgZGV0YWlscy4NCiAgICAgIHByb2R1Y2VzOg0KICAgICAgLSBhcHBsaWNhdGlvbi9qc29uDQogICAgICByZXNwb25zZXM6DQogICAgICAgICcyMDAnOg0KICAgICAgICAgIGRlc2NyaXB0aW9uOiAyMDAgcmVzcG9uc2UNCiAgICAgICAgICBleGFtcGxlczoNCiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246IHwtDQogICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICJmbGF2b3IiOiB7DQogICAgICAgICAgICAgICAgICAgICAgInJhbSI6IDUxMiwNCiAgICAgICAgICAgICAgICAgICAgICAiaWQiOiAxLA0KICAgICAgICAgICAgICAgICAgICAgICJsaW5rcyI6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9vcGVuc3RhY2suZXhhbXBsZS5jb20vdjEuMC8xMjM0L2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsIjogInNlbGYiDQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vb3BlbnN0YWNrLmV4YW1wbGUuY29tL2ZsYXZvcnMvMSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVsIjogImJvb2ttYXJrIg0KICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJtMS50aW55Ig0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQo="
        }
    ]
}