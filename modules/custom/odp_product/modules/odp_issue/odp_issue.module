<?php

/**
 * @file
 * Issue module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function odp_issue_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!in_array($form_id, ['node_issues_edit_form', 'node_issues_form'])) {
    return;
  }
  // Array to hide form elements.
  $elements_to_hide = [
    0 => 'revision_information',
    'actions' => ['preview'],
  ];
  foreach ($elements_to_hide as $key => $element) {
    if (!is_array($element)) {
      $form[$element]['#access'] = FALSE;
    }
    else {
      // Elements can loop around for sub elements but we can do this later.
      $form[$key][$element[0]]['#access'] = FALSE;
    }
  }
  // Create app developer flow. Hide issues related fields.
  if (FALSE == \Drupal::service('odp_user.organisation')->checkAccess(TRUE)) {
    // Added a custom class for developer node forms.
    if ($form['#process'][1][0]->getMode() == 'developer') {
      $form['#attributes']['class'][] = 'developer-form';
    }
    $node = NULL;
    if (!empty(\Drupal::request()->get('pid'))) {
      $product_id = (int) \Drupal::request()->get('pid');
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($product_id);
    }
    if ($node instanceof NodeInterface) {
      $form['field_api_product']['widget'][0]['target_id']['#default_value'] = $node ?: NULL;
      $form['field_api_product']['#access'] = FALSE;
    }
    if ($form_id == 'node_issues_edit_form') {
      $form['field_api_product']['#access'] = FALSE;
    }
    $form['moderation_state']['#access'] = FALSE;
    unset($form['meta']);
  }
}
