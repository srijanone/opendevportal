<?php

/**
 * @file
 * Module file for odp_user module.
 */

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * @file
 * Contains developer portal user module file.
 */

/**
 * Implements hook_theme().
 */
function odp_user_theme() {
  return [
    'user_organisation' => [
      'variables' => [
        'orgData' => NULL,
        'orgTitle' => NULL,
        'orgDescription' => NULL,
        'currentOrganisation' => NULL,
      ],
    ],
    'user_programs' => [
      'variables' => [
        'data' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function odp_user_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'media_library' &&
  in_array($view->current_display, ['widget', 'widget_table']) &&
  FALSE == \Drupal::service('odp_user.organisation')->checkAccess(TRUE)) {
    $query->addWhere(0, 'media_field_data.uid', \Drupal::currentUser()->id());
  }

}

/**
 * Implements hook_form_alter().
 *
 * @todo: Will clean the roles for administrator later.
 */
function odp_user_form_alter(&$form,
  FormStateInterface $form_state,
  $form_id) {
  $user_form_ids = [
    'user_form',
    'user_register_form',
    'group_content_public-group_membership_add_form',
    'group_content_public-group_membership_edit_form',
    'group_content_private-group_membership_add_form',
    'group_content_private-group_membership_edit_form',
    'group_content_protected-group_membership_add_form',
    'group_content_protected-group_membership_edit_form',
    'domain_group_settings_form',
  ];
  if (in_array($form_id, $user_form_ids)) {
    $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
    // Disable URL alias path from roles other than administrator.
    if (!in_array('administrator', $current_user_roles)) {
      unset($form['path']);
    }
    else {
      // Hiding PM and developer roles from user form for administrator.
      unset($form['account']['roles']['#options']['product_manager']);
      unset($form['account']['roles']['#options']['developer']);
    }
    if (in_array('admin', $current_user_roles)) {
      // Prefill the username after creation.
      if (!empty(\Drupal::request()->query->get('uid'))) {
        $form['entity_id']['widget'][0]['target_id']['#default_value'] = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::request()->query->get('uid'));
      }
      // Disable username and roles from add/edit user page for admin.
      $form['account']['mail']['#required'] = TRUE;
      $form['account']['roles']['#access'] = FALSE;
      $form['account']['name']['#type'] = 'hidden';
      $form['account']['name']['#value'] = 'email_registration_' . user_password();
      $form['actions']['submit']['#submit'][] = 'odp_user_redirect_new_registered_user';

      // Hiding site name, slogan, mail and error page from domain settings.
      $form['domain_group_site_settings']['site_name']['#access'] = FALSE;
      $form['domain_group_site_settings']['site_slogan']['#access'] = FALSE;
      $form['domain_group_site_settings']['site_mail']['#access'] = FALSE;
      $form['domain_group_site_settings']['error_page']['#access'] = FALSE;
    }
  }
}

/**
 * Callback function odp_user_redirect_new_registered_user().
 */
function odp_user_redirect_new_registered_user(&$form, FormStateInterface $form_state) {
  $query_params = explode('/', \Drupal::request()->query->get('destination'));
  $options = [
    'query' => ['destination' => '/program/users', 'uid' => $form_state->getValue('uid')],
  ];
  if (isset($query_params[3]) && !empty($query_params[3])) {
    $url = Url::fromUri('internal:/group/' . $query_params[3] . '/content/add/group_membership', $options);
  }
  else {
    $url = Url::fromUri('internal:/program/users');
  }

  $response = new RedirectResponse($url->toString());
  $response->send();
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @// TODO: will take out these code in the respective module later.
 */
function odp_user_menu_local_tasks_alter(&$data, $route_name) {
  switch ($route_name) {
    case 'domain_group.domain_group_settings_form':
    case 'entity.group.canonical':
    case 'entity.group.edit_form':
    case 'entity.group.delete_form':
    case 'layout_builder.overrides.group.view':
    case 'entity.node.canonical':
      $user_roles = \Drupal::service('odp_login_redirect.redirect_service')->getUserRoles();
      if (in_array('admin', $user_roles['system_roles']) ||
       in_array('anonymous', $user_roles['system_roles'])) {
        unset($data['tabs'][0]);
      }
      break;
  }
}
