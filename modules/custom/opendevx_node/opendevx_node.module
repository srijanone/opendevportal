<?php

/**
 * @file
 * Node module.
 */

use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Cache\Cache;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_entity_presave().
 */
function opendevx_node_entity_presave(EntityInterface $entity) {
  $type = $entity->getEntityType()->id();
  switch ($type) {
    case 'taxonomy_term':
      if (($entity->bundle() == 'organisation') &&
      (empty($entity->field_organisation_hash->value))) {
        // Save the organisation field as org-timestamp hash.
        $entity->field_organisation_hash->value = 'org-' . hash('md5', time());
        // Invalidate cache on program save.
        $tags = ['organisation-section'];
        Cache::invalidateTags($tags);
      }

      break;

    case 'node':
      if ($entity->bundle() == 'api_product') {
        // Invalidate cache on product save.
        $tags = ['product-banner:' . (int) $entity->id()];
        Cache::invalidateTags($tags);
      }
      if ($entity->bundle() == 'faq') {
        $question = strip_tags(trim($entity->toArray()['body'][0]['value']));
        $string = preg_replace("/\s|&nbsp;/", ' ', $question);
        $entity->title->value = substr($string, 0, 30);
      }
      $current_user_roles = \Drupal::currentUser()->getRoles();
      $field_name = 'field_organisation';
      // Get current user's organisation.
      $org = \Drupal::service('opendevx_user.organisation')->getOrgId();
      if (($entity->bundle() != 'events' || $entity->bundle() != 'assets')) {
        // Check organisation field empty and stored in tempstore.
        if ($entity->hasField($field_name)
        && ($entity->get($field_name)->isEmpty() == TRUE)) {
          if (!empty($org) && in_array('product_manager', $current_user_roles)) {
            // Save organisation field from variable.
            $entity->$field_name->target_id = $org;
          }
          elseif (in_array('developer', $current_user_roles)) {
            // Set a variable to store field name to get organization.
            $org_field = '';
            switch ($entity->bundle()) {
              case 'apps':
                $org_field = "field_api_product_single";
                break;

              case 'issues':
                $org_field = "field_api_product";
                break;

              default;
            }
            if ($entity->hasField($org_field) &&
            !$entity->get($org_field)->isEmpty()) {
              $entity->$field_name->target_id = (int) $entity->get($org_field)->referencedEntities()[0]->get($field_name)->getValue()[0]['target_id'];
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_views_post_render().
 */
function opendevx_node_views_post_render(
  ViewExecutable $view,
  &$output,
  CachePluginBase $cache) {
  $display = $view->getDisplay();
  $id = $display->display['id'];
  $dashboard_path = explode("/", \Drupal::request()->getPathInfo());
  if (($id === "page_dashboard_product_contents") && ($dashboard_path[1] == 'dashboard')) {
    $pid = (int) $dashboard_path[4];
    $node_object = \Drupal::service('opendevx_node.node');
    $node = $node_object->setNodeId($pid);
    if ($node->checkNodeExists() == TRUE) {
      $view->setTitle(ucwords($node->getTitle()));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function opendevx_node_form_alter(&$form,
FormStateInterface $form_state,
$form_id) {
  $form_ids = ['node_apps_edit_form', 'node_apps_form', 'node_issues_edit_form',
    'node_issues_form', 'node_forum_edit_form', 'node_forum_form',
  ];
  $current_user_roles = \Drupal::currentUser()->getRoles();
  // Set default value for dashboard reference.
  $dashboard_path = explode("/", \Drupal::request()->get('destination'));
  if (!empty($dashboard_path[1]) && ($dashboard_path[1] == 'dashboard')) {
    $pid = $dashboard_path[4];
    if (!empty($pid)) {
      $form['field_api_product']['widget'][0]['target_id']['#default_value'] =
      Node::load($pid);
    }
  }

  // Array to hide form elements.
  $elements_to_hide = [
    0 => 'revision_information',
    'actions' => ['preview'],
  ];
  // @todo will move into opendevx_apps module.
  // Array of forms which are affecting in this alteration.
  $affected_forms = [
    'node_apps_edit_form',
    'node_apps_form',
    'node_issues_edit_form',
    'node_issues_form',
  ];
  if (in_array($form_id, $affected_forms)) {
    foreach ($elements_to_hide as $key => $element) {
      if (!is_array($element)) {
        $form[$element]['#access'] = FALSE;
      }
      else {
        // Elements can loop around for sub elements but we can do this later.
        $form[$key][$element[0]]['#access'] = FALSE;
      }
    }
  }
  // Call the tempstore service for storing values from storage.
  $tempstore = \Drupal::service('tempstore.private');
  // Get the store collection.
  $store = $tempstore->get('opendevx_block');
  // Get the key/value pair.
  $product_id = $store->get('store_pid');
  if (!empty(\Drupal::request()->get('pid'))) {
    $product_id = \Drupal::request()->get('pid');
  }

  // Issues developer flow.
  if (in_array('developer', $current_user_roles) &&
  in_array($form_id, ['node_issues_form', 'node_issues_edit_form'])) {

    if (!empty($product_id)) {
      $node = Node::load($product_id);
      if (!empty($node) && ($node instanceof NodeInterface)) {
        $node_data = $node->toArray();
        $org_id = $node_data['field_organisation'][0]['target_id'];
        $form['field_api_product']['widget'][0]['target_id']['#default_value'] =
        Node::load($product_id);
        $form['field_organisation']['widget'][0]['target_id']['#default_value'] =
        Term::load($org_id);
        $form['actions'][$action]['#submit'][] = 'opendevx_node_issues_form_submit';
      }
    }
  }
  // Custom form submit handler.
  if (in_array($form_id, ['node_apps_edit_form', 'node_apps_form'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'opendevx_node_apps_form_submit';
      }
    }
  }
  if ($form_id == 'views_exposed_form') {
    switch ($form['#id']) {
      case "views-exposed-form-product-listing-block-1":
        $first_option['All'] = reset($form['org']['#options']);
        $form['org']['#options'] = $first_option +
          array_intersect_key($form['org']['#options'],
          \Drupal::service('opendevx_user.organisation')
            ->getOrganisationsDataByAccess());
        break;

      default:
        if (isset($form['state'])) {
          $form['state']['#options'] = array_filter($form['state']['#options']);
        }
        break;
    }
  }
  // Create app developer flow.
  // Hide moderation state field for app.
  if (in_array('developer', $current_user_roles)) {
    if ($form_id == 'node_apps_edit_form' || $form_id == 'node_apps_form') {
      if (!empty($product_id)) {
        $node = Node::load($product_id);
        if (!empty($node) && ($node instanceof NodeInterface)) {
          $node_data = $node->toArray();
          $api_id = $node_data['field_api_specifications'][0]['target_id'];
          $org_id = $node_data['field_organisation'][0]['target_id'];
          $form['field_api_document']['widget']['#default_value'] = $api_id;
          $form['field_organisation']['widget'][0]['target_id']['#default_value'] =
          Term::load($org_id);
        }
      }
    }
    if (in_array($form_id, $form_ids)) {
      $form['moderation_state']['#access'] = FALSE;
      unset($form['meta']);
    }
  }

  // Added custom validation on banner image in product.
  if ($form_id == 'node_api_product_edit_form') {
    // Custom Validate Function.
    // $form['#validate'][] = 'opendevx_node_form_validate';.
  }

  // Added a custom class in node form.
  if (in_array('developer', $current_user_roles) && in_array($form_id, $form_ids)) {
    if ($form['#process'][1][0]->getMode() == 'developer') {
      $form['#attributes']['class'][] = 'developer-form';
    }
  }
}

/**
 * Custom Apps content type form submit hanlder.
 */
function opendevx_node_apps_form_submit(array $form,
FormStateInterface $form_state) {
  $tempstore = \Drupal::service('tempstore.private');
  // Get the store collection.
  $store = $tempstore->get('opendevx_block');
  // Get the key/value pair.
  $store->set('store_pid', '');
  $store->set('store_path', '');
  $permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';
  $entity = $form_state->getFormObject()->getEntity();
  $entity->set('field_client_id', substr(str_shuffle($permitted_chars), 0, 10));
  $entity->set('field_client_secret', substr(str_shuffle($permitted_chars), 0, 4));
  $entity->save();
  $current_user_role = \Drupal::currentUser()->getRoles();
  if (in_array('developer', $current_user_role)) {
    // Redirect to app listing page.
    $url = "/dashboard/appmanager/apps?moderation_state=All";
  }
  else {
    // Redirect to app listing page.
    $url = "/dashboard/apimanager/apps?moderation_state=All";
  }
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Custom issues content type form submit hanlder.
 */
function opendevx_node_issues_form_submit(array $form,
FormStateInterface $form_state) {
  $tempstore = \Drupal::service('tempstore.private');
  // Get the store collection.
  $store = $tempstore->get('opendevx_block');
  // Get the key/value pair.
  $store->set('store_pid', '');
  $store->set('store_path', '');
  // Redirect to issue listing page.
  $url = "/dashboard/appmanager/issues";
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Implements hook_entity_access().
 */
function opendevx_node_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $accessResult = AccessResult::neutral();

  /** @var \Drupal\permissions_by_entity\Service\AccessChecker $accessChecker */
  if ($entity instanceof NodeInterface && !$entity->isNew() && $entity->hasField('field_organisation')) {
    // Expecting there is only one organisation assigned with the entity.
    $org_id = (int) $entity->get('field_organisation')->getString();
    if ($org_id) {
      $organizations = \Drupal::service('opendevx_user.organisation')->getOrganisationsDataByAccess();
      if (empty($organizations) && $account->isAnonymous()) {
        return AccessResult::forbidden('Access revoked by opendevx_node module.');
      }
      if (!$account->isAnonymous()) {
        // Get user organisation from service.
        $user_organizations = array_column(
          \Drupal::service('opendevx_user.organisation')->getUserOrganisations(), 'orgId');
        $organizations = array_unique(array_merge(array_keys($organizations), $user_organizations));
      }
      else {
        $organizations = array_keys($organizations);
      }
      // Check if entity organization is one of the user organizations.
      if ($org_id && !in_array($org_id, $organizations)) {
        return AccessResult::forbidden('Access revoked by opendevx_node module.');
      }
    }
  }

  return $accessResult;
}

/**
 * Custom validate function for banner image in products.
 */
function opendevx_node_form_validate(&$form, FormStateInterface &$form_state) {
  $width = 1440;
  $height = 218;
  if ($form_state->getUserInput()['field_banners_image']) {
    $mid = $form_state->getUserInput()['field_banners_image']['selection'][0]['target_id'];
    $media = Media::load($mid);
    $fid = $media->field_media_image->target_id;
    $file = File::load($fid);
    $image_factory = \Drupal::service('image.factory');
    $image = $image_factory->get($file->getFileUri());
    if ($image->getWidth() < $width || $image->getHeight() < $height) {
      // $errors = t('The image exceeds the maximum allowed
      // dimensions and an attempt to resize it failed.');.
      $form_state->setErrorByName('field_banners_image', t('The banner image size is less than the maximum allowed dimensions i.e Width: 1440px and Height: 218px'));
    }
  }
}

/**
 * Implements hook_form_form_id_alter().
 */
function opendevx_node_form_webform_submission_api_product_checkout_form_add_form_alter(&$form, FormStateInterface &$form_state) {
  if (isset($form['elements']['product']) && $form['elements']['product']['#default_value']->get('field_price')->first()) {
    $form['elements']['price']['#default_value'] = $form['elements']['product']['#default_value']->get('field_price')->first()->get('entity')->getValue()->get('field_rate')->value;
  }
}
