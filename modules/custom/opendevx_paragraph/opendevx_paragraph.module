<?php
/**
 * @file
 * Paragragh Module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Callback for Paragraph Experimental.
 */
function opendevx_paragraph_field_widget_paragraphs_form_alter(
   &$element,
   FormStateInterface $form_state,
   $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $element = opendevx_paragragh_add_conditional_logic($element, $field_definition);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Callback for Paragraph Classic.
 */
function opendevx_paragraph_field_widget_entity_reference_paragraphs_form_alter(
  &$element,
  FormStateInterface $form_state,
  $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $element = opendevx_paragragh_add_conditional_logic($element, $field_definition);
}

/**
 * Callback to add conditional logic.
 *
 * @param mixed $element
 *   Paragraph element object.
 * @param object $field_definition
 *   Respective field defination.
 *
 * @return object
 */
function opendevx_paragragh_add_conditional_logic($element, $field_definition) {
  // Get the paragraph machine name.
  $paragraph_ref_name = $field_definition->getName();
  switch ($paragraph_ref_name) {
    case 'field_api_detail_section':
      // Dependee Field Name.
      $dependee_field_name = 'field_select_file';
      // Create the selector.
      $selector = sprintf('select[name="%s[%d][subform][%s]"]', $paragraph_ref_name, $element['#delta'], $dependee_field_name);
      // Array of Field to show on selector value in
      // selecor_value => [FIELDS TO SHOW] key value pair.
      // e.g. Image  => [Image, Image Alignment, Title].
      $field_name = [
        'image' => ['field_image', 'field_image_alignment'],
        'file' => ['field_files', 'field_image_alignment'],
        'video' => ['field_video', 'field_image_alignment'],
      ];
      // Callback to apply dependency on paragraph fields.
      $element = opendevx_paragraph_get_paragraph_dependency($element,
      $field_name, $selector);
      break;

  }
  return $element;
}

/**
 * Alter field name.
 *
 * @param mixed $element
 *   Paragraph fields element.
 * @param array $field
 *   Array of depenendee/dependent fields.
 * @param string $selector
 *   Selector element.
 *
 * @return array
 *   Array of elements.
 */
function opendevx_paragraph_get_paragraph_dependency($element,
array $field, $selector) {
  if (empty($field)) {
    return $element;
  }
  foreach ($field as $key => $value) {
    foreach ($value as $val) {
      $element['subform'][$val]['#states']['visible'][][$selector] = ['value' => $key];
      $element['subform'][$val]['#states'][] = 'OR';
    }
  }

  return $element;
}
