diff --git a/modules/layout_builder/config/schema/layout_builder.schema.yml b/modules/layout_builder/config/schema/layout_builder.schema.yml
index 862c90ec..f657f0ec 100644
--- a/modules/layout_builder/config/schema/layout_builder.schema.yml
+++ b/modules/layout_builder/config/schema/layout_builder.schema.yml
@@ -66,6 +66,12 @@ inline_block:
     block_serialized:
       type: string
       label: 'Serialized block'
+    type:
+      type: string
+      label: 'Block type'
+    uuid:
+      type: string
+      label: 'Block UUID'

 block.settings.inline_block:*:
   type: inline_block
diff --git a/modules/layout_builder/layout_builder.services.yml b/modules/layout_builder/layout_builder.services.yml
index b2ee1fe1..4bd651a0 100644
--- a/modules/layout_builder/layout_builder.services.yml
+++ b/modules/layout_builder/layout_builder.services.yml
@@ -58,3 +58,14 @@ services:
     class: Drupal\layout_builder\Controller\LayoutBuilderHtmlEntityFormController
     public: false
     arguments: ['@layout_builder.controller.entity_form.inner']
+  layout_builder.normalizer.entity_display:
+    class: Drupal\layout_builder\Normalizer\LayoutEntityDisplayNormalizer
+    tags:
+      # Priority must be higher than serializer.normalizer.config_entity.
+      - { name: normalizer, priority: 1 }
+    arguments: ['@entity_type.manager', '@entity_type.repository', '@entity_field.manager']
+  layout_builder.normalizer.section_data:
+    class: Drupal\layout_builder\Normalizer\SectionDataNormalizer
+    tags:
+      # Priority must be higher than serializer.normalizer.typed_data.
+      - { name: normalizer, priority: 1 }
diff --git a/modules/layout_builder/src/Field/LayoutSectionItemList.php b/modules/layout_builder/src/Field/LayoutSectionItemList.php
index 3243be97..ef3610c5 100644
--- a/modules/layout_builder/src/Field/LayoutSectionItemList.php
+++ b/modules/layout_builder/src/Field/LayoutSectionItemList.php
@@ -2,11 +2,11 @@

 namespace Drupal\layout_builder\Field;

+use Drupal\layout_builder\Section;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Field\FieldItemList;
-use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Session\AccountInterface;
-use Drupal\layout_builder\Section;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\layout_builder\SectionListInterface;
 use Drupal\layout_builder\SectionStorage\SectionStorageTrait;

@@ -102,6 +102,11 @@ public function equals(FieldItemListInterface $list_to_compare) {
    */
   public function defaultAccess($operation = 'view', AccountInterface $account = NULL) {
     // @todo Allow access in https://www.drupal.org/node/2942975.
+
+    if ($operation === 'view') {
+      return parent::defaultAccess($operation, $account);
+    }
+
     return AccessResult::forbidden();
   }

diff --git a/modules/layout_builder/src/LayoutBuilderServiceProvider.php b/modules/layout_builder/src/LayoutBuilderServiceProvider.php
index 71005ee4..a19ec2a5 100644
--- a/modules/layout_builder/src/LayoutBuilderServiceProvider.php
+++ b/modules/layout_builder/src/LayoutBuilderServiceProvider.php
@@ -2,13 +2,11 @@

 namespace Drupal\layout_builder;

+use Symfony\Component\DependencyInjection\Reference;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
+use Symfony\Component\DependencyInjection\Definition;
 use Drupal\Core\DependencyInjection\ServiceProviderInterface;
 use Drupal\layout_builder\EventSubscriber\SetInlineBlockDependency;
-use Drupal\layout_builder\Normalizer\LayoutEntityDisplayNormalizer;
-use Symfony\Component\DependencyInjection\ChildDefinition;
-use Symfony\Component\DependencyInjection\Definition;
-use Symfony\Component\DependencyInjection\Reference;

 /**
  * Sets the layout_builder.get_block_dependency_subscriber service definition.
@@ -39,14 +37,6 @@ public function register(ContainerBuilder $container) {
       $definition->addTag('event_subscriber');
       $container->setDefinition('layout_builder.get_block_dependency_subscriber', $definition);
     }
-    if (isset($modules['serialization'])) {
-      $definition = (new ChildDefinition('serializer.normalizer.config_entity'))
-        ->setClass(LayoutEntityDisplayNormalizer::class)
-        // Ensure that this normalizer takes precedence for Layout Builder data
-        // over the generic serializer.normalizer.config_entity.
-        ->addTag('normalizer', ['priority' => 5]);
-      $container->setDefinition('layout_builder.normalizer.layout_entity_display', $definition);
-    }
   }

 }
diff --git a/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php b/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
index 886304fa..c0200594 100644
--- a/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
+++ b/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
@@ -2,8 +2,9 @@

 namespace Drupal\layout_builder\Normalizer;

-use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
+use Drupal\layout_builder\Section;
 use Drupal\serialization\Normalizer\ConfigEntityNormalizer;
+use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;

 /**
  * Normalizes/denormalizes LayoutEntityDisplay objects into an array structure.
@@ -21,13 +22,26 @@ class LayoutEntityDisplayNormalizer extends ConfigEntityNormalizer {
   /**
    * {@inheritdoc}
    */
-  protected static function getDataWithoutInternals(array $data) {
-    $data = parent::getDataWithoutInternals($data);
-    // Do not expose the actual layout sections in normalization.
-    // @todo Determine what to expose here in
-    //   https://www.drupal.org/node/2942975.
-    unset($data['third_party_settings']['layout_builder']['sections']);
+  public function normalize($object, $format = NULL, array $context = []) {
+    $data = static::getDataWithoutInternals($object->toArray());
+    if (!empty($data['third_party_settings']['layout_builder']['sections'])) {
+      $sections = &$data['third_party_settings']['layout_builder']['sections'];
+      $sections = array_map(static function (Section $section) {
+        return $section->toArray();
+      }, $sections);
+    }
     return $data;
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function denormalize($data, $class, $format = NULL, array $context = []) {
+    if (!empty($data['third_party_settings']['layout_builder']['sections'])) {
+      $sections = &$data['third_party_settings']['layout_builder']['sections'];
+      $sections = array_map([Section::class, 'fromArray'], $sections);
+    }
+    return parent::denormalize(static::getDataWithoutInternals($data), $class, $format, $context);
+  }
+
 }
diff --git a/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php b/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php
new file mode 100644
index 00000000..761c2b12
--- /dev/null
+++ b/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\layout_builder\Normalizer;
+
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\Plugin\DataType\SectionData;
+use Drupal\serialization\Normalizer\TypedDataNormalizer;
+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
+
+/**
+ * Normalizes section data.
+ */
+class SectionDataNormalizer extends TypedDataNormalizer implements DenormalizerInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $supportedInterfaceOrClass = SectionData::class;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function normalize($object, $format = NULL, array $context = []) {
+    return $object->getValue()->toArray();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function denormalize($data, $class, $format = NULL, array $context = []) {
+    return Section::fromArray($data);
+  }
+
+}
diff --git a/modules/layout_builder/src/Plugin/Block/InlineBlock.php b/modules/layout_builder/src/Plugin/Block/InlineBlock.php
index 01f64eb3..55870ee0 100644
--- a/modules/layout_builder/src/Plugin/Block/InlineBlock.php
+++ b/modules/layout_builder/src/Plugin/Block/InlineBlock.php
@@ -2,19 +2,19 @@

 namespace Drupal\layout_builder\Plugin\Block;

-use Drupal\block_content\Access\RefinableDependentAccessInterface;
-use Drupal\block_content\Access\RefinableDependentAccessTrait;
-use Drupal\Component\Utility\NestedArray;
-use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Entity\Entity\EntityFormDisplay;
-use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Component\Utility\NestedArray;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Form\SubformStateInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
-use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\block_content\Access\RefinableDependentAccessTrait;
+use Drupal\block_content\Access\RefinableDependentAccessInterface;

 /**
  * Defines an inline block plugin type.
@@ -244,6 +244,10 @@ protected function getEntity() {
           'reusable' => FALSE,
         ]);
       }
+      if (isset($this->configuration['type']) && isset($this->configuration['uuid'])) {
+        $entity = $this->entityTypeManager->getStorage('block_content')->loadByProperties(['uuid' => $this->configuration['uuid']]);
+        $this->blockContent = is_array($entity) ? array_pop($entity) : $entity;
+      }
       if ($this->blockContent instanceof RefinableDependentAccessInterface && $dependee = $this->getAccessDependency()) {
         $this->blockContent->setAccessDependency($dependee);
       }
@@ -294,6 +298,8 @@ public function saveBlockContent($new_revision = FALSE, $duplicate_block = FALSE
       $block->save();
       $this->configuration['block_revision_id'] = $block->getRevisionId();
       $this->configuration['block_serialized'] = NULL;
+      $this->configuration['type'] = $block->bundle();
+      $this->configuration['uuid'] = $block->uuid();
     }
   }

diff --git a/modules/layout_builder/src/Plugin/DataType/SectionData.php b/modules/layout_builder/src/Plugin/DataType/SectionData.php
index 8783904d..4d1c9fd4 100644
--- a/modules/layout_builder/src/Plugin/DataType/SectionData.php
+++ b/modules/layout_builder/src/Plugin/DataType/SectionData.php
@@ -2,8 +2,8 @@

 namespace Drupal\layout_builder\Plugin\DataType;

-use Drupal\Core\TypedData\TypedData;
 use Drupal\layout_builder\Section;
+use Drupal\Core\TypedData\TypedData;

 /**
  * Provides a data type wrapping \Drupal\layout_builder\Section.
@@ -30,8 +30,18 @@ class SectionData extends TypedData {
    * {@inheritdoc}
    */
   public function setValue($value, $notify = TRUE) {
+
+    if ($value && is_array($value)) {
+      $value = Section::fromArray($value);
+    }
+
     if ($value && !$value instanceof Section) {
-      throw new \InvalidArgumentException(sprintf('Value assigned to "%s" is not a valid section', $this->getName()));
+      if (isset($value->value) && !$value->value instanceof Section) {
+        throw new \InvalidArgumentException(sprintf('Value assigned to "%s" is not a valid section', $this->getName()));
+      }
+      else {
+        parent::setValue($value->value, $notify);
+      }
     }
     parent::setValue($value, $notify);
   }
diff --git a/modules/layout_builder/src/Section.php b/modules/layout_builder/src/Section.php
index 41fe13c5..edea7494 100644
--- a/modules/layout_builder/src/Section.php
+++ b/modules/layout_builder/src/Section.php
@@ -337,9 +337,9 @@ public function toArray() {
     return [
       'layout_id' => $this->getLayoutId(),
       'layout_settings' => $this->getLayoutSettings(),
-      'components' => array_map(function (SectionComponent $component) {
+      'components' => array_values(array_map(function (SectionComponent $component) {
         return $component->toArray();
-      }, $this->getComponents()),
+      }, $this->getComponents())),
       'third_party_settings' => $this->thirdPartySettings,
     ];
   }
