{
    "_links": {
        "self": {
            "href": ""
        },
        "type": {
            "href": "http:\/\/drupal.org\/rest\/type\/file\/file"
        },
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "href": "http:\/\/default\/user\/62?_format=hal_json"
            }
        ]
    },
    "fid": [
        {
            "value": 1051
        }
    ],
    "uuid": [
        {
            "value": "ae8d8748-e4e2-4344-a1c2-962a44193d45"
        }
    ],
    "langcode": [
        {
            "value": "en"
        }
    ],
    "_embedded": {
        "http:\/\/drupal.org\/rest\/relation\/file\/file\/uid": [
            {
                "_links": {
                    "self": {
                        "href": "http:\/\/default\/user\/62?_format=hal_json"
                    },
                    "type": {
                        "href": "http:\/\/drupal.org\/rest\/type\/user\/user"
                    }
                },
                "uuid": [
                    {
                        "value": "8708f080-d05a-4f85-a2c0-9934302ff7e3"
                    }
                ]
            }
        ]
    },
    "filename": [
        {
            "value": "petstore-1.yaml"
        }
    ],
    "uri": [
        {
            "value": "public:\/\/2020-11\/petstore-1.yaml",
            "url": "\/sites\/default\/files\/2020-11\/petstore-1.yaml"
        }
    ],
    "filemime": [
        {
            "value": "application\/octet-stream"
        }
    ],
    "filesize": [
        {
            "value": 23986
        }
    ],
    "status": [
        {
            "value": true
        }
    ],
    "created": [
        {
            "value": "2020-11-05T07:14:13+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "changed": [
        {
            "value": "2020-11-05T07:15:36+00:00",
            "format": "Y-m-d\\TH:i:sP"
        }
    ],
    "data": [
        {
            "value": "\/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlswLTldKScKICAgICAgICBleGFtcGxlOiBkcm93c3NhUDEyMwogICAgICBwaG9uZToKICAgICAgICBkZXNjcmlwdGlvbjogVXNlciBwaG9uZSBudW1iZXIgaW4gaW50ZXJuYXRpb25hbCBmb3JtYXQKICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBwYXR0ZXJuOiAiXlxcKyg\/OlswLTldLT8pezYsMTR9WzAtOV0kIgogICAgICAgIGV4YW1wbGU6ICsxLTIwMi01NTUtMDE5MgogICAgICAgIHgtbnVsbGFibGU6IHRydWUKICAgICAgdXNlclN0YXR1czoKICAgICAgICBkZXNjcmlwdGlvbjogVXNlciBzdGF0dXMKICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgZm9ybWF0OiBpbnQzMgogICAgeG1sOgogICAgICBuYW1lOiBVc2VyCg=="
        }
    ]
}