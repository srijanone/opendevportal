<?php

/**
 * @file
 * To perform sync operation between portal to hub.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_presave().
 */
function opendevx_connector_entity_presave(EntityInterface $entity) {
  $operation = 'store';
  $response = '';
  switch ($entity->getEntityTypeId()) {
    case 'node':
      if ($entity->bundle() == 'gateway') {
        $response = prepare_gateway($entity, $operation);
      }
      break;

    case 'group':
      $response = prepare_program($entity, $operation);
      break;
  }
  if ($response) {
    $res = json_decode($response, TRUE);
    $entity->set('field_hub_content_id', $res['data']['id']);
  }
}

/**
 * Implements hook_entity_delete().
 */
function opendevx_connector_entity_delete(EntityInterface $entity) {
  $operation = 'delete';
  switch ($entity->getEntityTypeId()) {
    case 'node':
      if ($entity->bundle() == 'gateway') {
        prepare_gateway($entity, $operation);
      }

      break;

    case 'group':
      prepare_program($entity, $operation);

      break;

  }
}

/**
 * Create Gateway data.
 */
function prepare_gateway($entity, $operation) {
  if ($operation == 'delete') {
    $value = [
      'method' => 'DELETE',
      'entity' => 'gateway',
    ];
  }
  else {
    $value = [
      'method' => ($entity->field_hub_content_id->value) ? 'PATCH' : 'POST',
      'entity' => 'gateway',
      'value' => [
        'data' => [
          'type' => 'node--' . $entity->bundle(),
          'attributes' => [
            'status' => $entity->status->value,
            'title' => $entity->title->value,
            'field_gateway' => strtolower($entity->get('field_gateway')->referencedEntities()[0]->getName()),
            'field_key' => $entity->field_client_id->value,
            'field_secret' => $entity->field_client_secret->value,
            'field_region' => $entity->field_region->value,
          ],
        ],
      ],
    ];
  }
  if ($entity->field_hub_content_id->value) {
    $value['value']['data']['id'] = $entity->field_hub_content_id->value;
  }
  $entity_op = \Drupal::service('opendevx_connector.gateway_service');
  $response = $entity_op->sendEntity($value);

  return $response;
}

/**
 * Prepare program data.
 */
function prepare_program($entity, $operation) {
  if ($operation == 'delete') {
    $value = [
      'method' => 'DELETE',
      'entity' => 'program',
    ];
  }
  else {
    $value = [
      'method' => ($entity->field_hub_content_id->value) ? 'PATCH' : 'POST',
      'entity' => 'program',
      'value' => [
        'data' => [
          'type' => 'node--program',
          'attributes' => [
            'status' => TRUE,
            'title' => $entity->label->value,
          ],
        ],
      ],
    ];
    $gateway = $entity->get('field_gateway')->referencedEntities()[0];
    if ($gateway && $gateway->field_hub_content_id->value) {
      $value['value']['data']['relationships']['field_gatewayid']['data'] = [
        'type' => 'node--gateway',
        'id' => $entity->get('field_gateway')->referencedEntities()[0]->field_hub_content_id->value,
      ];
    }
    else {
      $value['value']['data']['relationships']['field_gatewayid']['data'] = NULL;
    }
  }
  if ($entity->field_hub_content_id->value) {
    $value['value']['data']['id'] = $entity->field_hub_content_id->value;
  }
  $entity_op = \Drupal::service('opendevx_connector.gateway_service');
  $response = $entity_op->sendEntity($value);

  return $response;
}
