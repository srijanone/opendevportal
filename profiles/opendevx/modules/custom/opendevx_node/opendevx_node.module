<?php

/**
 * @file
 * Node module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_entity_presave().
 */
function opendevx_node_entity_presave(EntityInterface $entity) {
  $type = $entity->getEntityType()->id();
  switch ($type) {

    case 'node':
      if ($entity->bundle() == 'api_product') {
        // Invalidate cache on product save.
        $tags = ['product-banner:' . (int) $entity->id()];
        Cache::invalidateTags($tags);
      }
      if ($entity->bundle() == 'faq') {
        $question = strip_tags(trim($entity->toArray()['body'][0]['value']));
        $string = preg_replace("/\s|&nbsp;/", ' ', $question);
        $entity->title->value = substr($string, 0, 30);
      }
      $current_user_roles = \Drupal::currentUser()->getRoles();
      $field_name = 'field_organisation';
      // Get current user's organisation.
      $org = \Drupal::service('opendevx_user.organisation')->getOrgId();
      if (($entity->bundle() != 'events' || $entity->bundle() != 'assets')) {
        // Check organisation field empty and stored in tempstore.
        if ($entity->hasField($field_name)
        && ($entity->get($field_name)->isEmpty() == TRUE)) {
          if (!empty($org) && in_array('product_manager', $current_user_roles)) {
            // Save organisation field from variable.
            $entity->$field_name->target_id = $org;
          }
          elseif (in_array('developer', $current_user_roles)) {
            // Set a variable to store field name to get organization.
            $org_field = '';
            switch ($entity->bundle()) {
              case 'apps':
                $org_field = "field_api_product_single";
                break;

              case 'issues':
                $org_field = "field_api_product";
                break;

              default;
            }
            if ($entity->hasField($org_field) &&
            !$entity->get($org_field)->isEmpty()) {
              $entity->$field_name->target_id = (int) $entity->get($org_field)->referencedEntities()[0]->get($field_name)->getValue()[0]['target_id'];
            }
          }
        }
      }

      break;
  }
}

/**
 * Implements hook_views_post_render().
 */
function opendevx_node_views_post_render(
  ViewExecutable $view,
  &$output,
  CachePluginBase $cache) {
  $display = $view->getDisplay();
  $id = $display->display['id'];
  $dashboard_path = explode("/", \Drupal::request()->getPathInfo());
  if (($id === "page_dashboard_product_contents") && ($dashboard_path[1] == 'dashboard')) {
    $pid = (int) $dashboard_path[4];
    $node_object = \Drupal::service('opendevx_node.node');
    $node = $node_object->setNodeId($pid);
    if ($node->checkNodeExists() == TRUE) {
      $view->setTitle(ucwords($node->getTitle()));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function opendevx_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_ids = ['node_apps_edit_form', 'node_apps_form', 'node_issues_edit_form',
    'node_issues_form', 'node_forum_edit_form', 'node_forum_form',
  ];
  // Array to hide form elements.
  $elements_to_hide = [
    0 => 'revision_information',
    'actions' => ['preview'],
  ];
  // @todo will move into opendevx_apps module.
  // Array of forms which are affecting in this alteration.
  $affected_forms = [
    'node_apps_edit_form',
    'node_apps_form',
    'node_issues_edit_form',
    'node_issues_form',
  ];
  if (in_array($form_id, $affected_forms)) {
    foreach ($elements_to_hide as $key => $element) {
      if (!is_array($element)) {
        $form[$element]['#access'] = FALSE;
      }
      else {
        // Elements can loop around for sub elements but we can do this later.
        $form[$key][$element[0]]['#access'] = FALSE;
      }
    }
  }

  // Custom form submit handler.
  if (in_array($form_id, ['node_apps_edit_form', 'node_apps_form'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'opendevx_node_apps_form_submit';
      }
    }
  }

  // Create app developer flow. Hide moderation state field for app.
  if (FALSE == \Drupal::service('opendevx_user.organisation')->checkAccess()) {
    $node = NULL;
    if (!empty(\Drupal::request()->get('pid'))) {
      $product_id = (int) \Drupal::request()->get('pid');
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($product_id);
    }
    if (($form_id == 'node_apps_edit_form' || $form_id == 'node_apps_form') && ($node instanceof NodeInterface)) {
      $node_data = $node->toArray();
      $form['field_api_document']['widget']['#default_value'] = $node_data['field_api_specifications'][0]['target_id'];
    }

    if (in_array($form_id, $form_ids)) {
      // Added a custom class for developer node forms.
      if ($form['#process'][1][0]->getMode() == 'developer') {
        $form['#attributes']['class'][] = 'developer-form';
      }

      if ($node instanceof NodeInterface) {
        $form['field_api_product']['widget'][0]['target_id']['#default_value'] = $node ?: NULL;
        $form['field_api_product_single']['widget']['#default_value'] = $product_id;
        $form['field_api_product_single']['#access'] = FALSE;
        $form['field_api_product']['#access'] = FALSE;
      }

      if ($form_id == 'node_apps_edit_form') {
        $form['field_api_product_single']['#access'] = FALSE;
      }

      if ($form_id == 'node_issues_edit_form' || $form_id == 'node_forum_edit_form') {
        $form['field_api_product']['#access'] = FALSE;
      }
      $form['moderation_state']['#access'] = FALSE;
      unset($form['meta']);
    }
  }

  $form_ids = [
    'views-exposed-form-product-listing-block-1',
    'views-exposed-form-use-cases-listing-block-1',
    'views-exposed-form-use-cases-listing-block-2',
    'views-exposed-form-app-gallery-block-1',
    'views-exposed-form-events-block-1',
  ];
  if (in_array($form['#id'], $form_ids) && isset($form['gid'])) {
    $form['gid']['#type'] = 'select';
    $form['gid']['#options'] = \Drupal::service('opendevx_node.usergroup')->getUserGroups();
    $form['gid']['#size'] = 1;
    $form['gid']['#validated'] = TRUE;
  }

  // Modify the node form title while adding group content.
  $request = \Drupal::request();
  if ($request->attributes->get('_route') === 'entity.group_content.create_form') {
    $type = str_replace('group_node:', '', $request->attributes->get('plugin_id'));
    $type_label = \Drupal::entityTypeManager()->getStorage('node_type')->load($type)->get('name');
    $form['#title'] = t("Add %label", ["%label" => $type_label]);
  }

  // Add cancel button on node add/edit form to go back to daashboard.
  if ($request->query->get('destination')) {
    $goto_destination_forms = [
      'entity.group_content.create_form',
      'entity.node.edit_form',
      'layout_builder.overrides.node.view',
      'entity.group.edit_form',
      'entity.group_content.add_form'
    ];

    if (in_array($request->attributes->get('_route'), $goto_destination_forms)) {
      $form['actions']['goto_destination'] = [
        '#markup' => "<a id='goto-destination' class='button button--danger js-form-submit form-submit btn btn-primary'
          href='" . $request->query->get('destination') . "'>" . t('Cancel') .
        "</a>",
        '#weight' => 100
      ];
    }
  }
}

/**
 * Custom Apps content type form submit hanlder.
 */
function opendevx_node_apps_form_submit(array $form,
FormStateInterface $form_state) {
  $store = \Drupal::service('tempstore.private')->get('opendevx_block');
  // Get the key/value pair.
  $store->set('store_pid', '');
  $store->set('store_path', '');
  $permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';
  $entity = $form_state->getFormObject()->getEntity();
  $entity->set('field_client_id', substr(str_shuffle($permitted_chars), 0, 10));
  $entity->set('field_client_secret', substr(str_shuffle($permitted_chars), 0, 4));
  $entity->save();

  if (FALSE == \Drupal::service('opendevx_user.organisation')->checkAccess()) {
    $url = "/dashboard/appmanager/apps?moderation_state=All";
  }
  else if (in_array('admin', \Drupal::currentUser()->getRoles())) {
    $url = "/dashboard/manage/apps";
  }
  else if (!empty(\Drupal::request()->query->get('destination'))) {
    $url = \Drupal::request()->query->get('destination');
  }
  else {
    $url = \Drupal::request()->headers->get('referer');
  }
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Implements hook_form_form_id_alter().
 */
function opendevx_node_form_webform_submission_api_product_checkout_form_add_form_alter(&$form, FormStateInterface &$form_state) {
  if (isset($form['elements']['product']) && $form['elements']['product']['#default_value']->get('field_price')->first()) {
    $form['elements']['price']['#default_value'] = $form['elements']['product']['#default_value']->get('field_price')->first()->get('entity')->getValue()->get('field_rate')->value;
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function opendevx_node_local_tasks_alter(&$local_tasks) {
  if (in_array('admin', \Drupal::currentUser()->getRoles())) {
    unset($local_tasks['group.content']);
  }
}
