<?php

/**
 * @file
 * Opendevx Notification.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 *
 * Twig template for render notification content.
 */
function opendevx_notification_theme($existing, $type, $theme, $path) {
  return [
    'opendevx_notification_widget' => [
      'variables' => [
        'uid' => NULL,
        'notification_type' => NULL,
        'total' => NULL,
        'unread' => NULL,
        'notification_list' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function opendevx_notification_entity_insert(EntityInterface $entity) {
  $sendnotification = \Drupal::service('opendevx_notification.notification');
  $sendnotification->sendNotification($entity);
}

/**
 * Implements hook_entity_update().
 */
function opendevx_notification_entity_update(EntityInterface $entity) {
  $sendnotification = \Drupal::service('opendevx_notification.notification');
  $sendnotification->sendNotification($entity);
}

/**
 * Implements hook_views_query_alter().
 */
function opendevx_notification_views_query_alter(ViewExecutable $view, $query) {
  if ($view->id() == 'notification_view' && $view->current_display == 'notification_view') {
    $query->addWhere('1', 'notifications_node_field_data.action', 'content_moderated');
    $roles = \Drupal::currentUser()->getRoles(TRUE);
    if (!empty($roles[0])) {
      $notificaiton = \Drupal::service('opendevx_notification.notification');
      $notifi_id = $notificaiton->getNotification();
      $notifi_id = array_column($notifi_id['notificationList'], 'id');
      $notifi_id = ($notifi_id) ? $notifi_id : [''];
      $query->addWhere('1', 'notifications_node_field_data.id', $notifi_id, 'IN');
    }

  }
}
