<?php

/**
 * @file
 * Module file for opendevx_user module.
 */

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * @file
 * Contains opendevx user module file.
 */

/**
 * Implements hook_theme().
 */
function opendevx_user_theme() {
  return [
    'user_organisation' => [
      'variables' => [
        'orgData' => NULL,
        'orgTitle' => NULL,
        'orgDescription' => NULL,
        'currentOrganisation' => NULL,
      ],
    ],
    'user_programs' => [
      'variables' => [
        'data' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function opendevx_user_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'organisation_users' &&
    in_array($view->current_display, ['page_1', 'page_2'])) {
    $role_statement = opendevx_user_get_roles_hierarchy();

    if (isset($role_statement)) {
      $query->addWhere(0, 'user__roles.roles_target_id', $role_statement, 'IN');
    }
  }

  if ($view->id() == 'media_library' &&
  in_array($view->current_display, ['widget', 'widget_table']) &&
  FALSE == \Drupal::service('opendevx_user.organisation')->checkAccess(TRUE)) {
    $query->addWhere(0, 'media_field_data.uid', \Drupal::currentUser()->id());
  }

}

/**
 * Implements hook_form_alter().
 */
function opendevx_user_form_alter(&$form,
  FormStateInterface $form_state,
  $form_id) {
  $current_user_roles = \Drupal::currentUser()->getRoles(TRUE);
  if ($form_id == 'views_exposed_form' && $current_user_roles && !in_array('administrator', $current_user_roles)) {
    if (isset($form['role'])) {
      $form['role']['#options'] =
        ["All" => array_shift($form['role']['#options'])] +
        array_intersect_key($form['role']['#options'], opendevx_user_get_roles_hierarchy());
    }
  }

  $user_form_ids = [
    'user_form',
    'user_register_form',
    'group_content_public-group_membership_add_form',
    'group_content_public-group_membership_edit_form',
    'group_content_private-group_membership_add_form',
    'group_content_private-group_membership_edit_form',
    'group_content_protected-group_membership_add_form',
    'group_content_protected-group_membership_edit_form',
  ];
  if (in_array($form_id, $user_form_ids)) {
    if (!in_array('administrator', $current_user_roles)) {
      unset($form['path']);
    }
    if (in_array('admin', $current_user_roles)) {
      if (!empty(\Drupal::request()->query->get('uid'))) {
        $form['entity_id']['widget'][0]['target_id']['#default_value'] = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::request()->query->get('uid'));
      }
      $form['account']['mail']['#required'] = TRUE;
      $form['account']['roles']['#access'] = FALSE;
      $form['account']['name']['#type'] = 'hidden';
      $form['account']['name']['#value'] = 'email_registration_' . user_password();
      $form['actions']['submit']['#submit'][] = 'opendevx_user_redirect_new_registered_user';
      unset($form['path']);
    }

  }

}

/**
 * Callback function opendevx_user_redirect_new_registered_user().
 */
function opendevx_user_redirect_new_registered_user(&$form, FormStateInterface $form_state) {
  $query_params = explode('/', \Drupal::request()->query->get('destination'));
  $options = [
    'query' => ['destination' => '/program/users', 'uid' => $form_state->getValue('uid')],
  ];
  if (isset($query_params[3]) && !empty($query_params[3])) {
    $url = Url::fromUri('internal:/group/' . $query_params[3] . '/content/add/group_membership', $options);
  }
  else {
    $url = Url::fromUri('internal:/program/users');
  }

  $response = new RedirectResponse($url->toString());
  $response->send();
}

/**
 * Returns roles hierarchy for the current role.
 */
function opendevx_user_get_roles_hierarchy() {
  $current_user_role = \Drupal::currentUser()->getRoles(TRUE);

  // Specify the access for roles as per hierarchy.
  $role_access[0] = ['developer'];
  $role_access[1] = array_merge($role_access[0], ['product_manager']);
  $role_access[2] = array_merge($role_access[1], ['admin']);
  switch (reset($current_user_role)) {
    case "developer":
      $role_statement = array_combine($role_access[0], $role_access[0]);
      break;

    case "product_manager":
      $role_statement = array_combine($role_access[1], $role_access[1]);
      break;

    case "admin":
      $role_statement = array_combine($role_access[2], $role_access[2]);
      break;

    default:
      $role_statement = NULL;
      break;
  }

  return $role_statement;
}
