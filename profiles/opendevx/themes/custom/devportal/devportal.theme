<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\group\Entity\GroupInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 *
 */
function devportal_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

function devportal_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
  if ($hook == 'block') {
    if (isset($variables['elements']['content']) && isset($variables['elements']['content']['#block_content'])) {
      $suggestions[] = $hook . '__' . $variables['elements']['content']['#entity_type'] . '_' . $variables['elements']['content']['#block_content']->bundle() . '_' . $variables['elements']['content']['#view_mode'];
    }
  }
}

/**
 * Implements hook_preprocess_html.
 */
function devportal_preprocess_html(&$variables) {
  if ($program_id = \Drupal::service('opendevx_core.program_domain')->getProgramDomainId()) {
    $program = \Drupal::entityTypeManager()->getStorage('group')->load($program_id);
    if ($program instanceof GroupInterface) {

      // @TODO: if we will use text/link color field, just uncomment this code.
      // As of now there is no such field in program.

      // if ($program->hasField('field_link_color') && $program->field_link_color->color) {
      //   $color_value = ltrim($program->field_link_color->color, "#");
      //   $variables['link_color'] = "link-clr-" . $color_value;
      // }
      // if ($program->hasField('field_text_color') && $program->field_text_color->color) {
      //   $color_value = ltrim($program->field_text_color->color, "#");
      //   $variables['text_color'] = "txt-clr-" . $color_value;
      // }

      if ($program->hasField('field_header_background_color') && $program->field_header_background_color->color) {
        $color_value = ltrim($program->field_header_background_color->color, "#");
        $variables['header_color'] = "hdr-clr-" . $color_value;
      }

      if ($program->hasField('field_icons_bg_color') && $program->field_icons_bg_color->color) {
        $color_value = ltrim($program->field_icons_bg_color->color, "#");
        $variables['icon_color'] = "ico-clr-" . $color_value;
      }

      if ($program->hasField('field_font_family') && $program->field_font_family->value) {
        $variables['font_family'] = "font-" . $program->field_font_family->value;
      }
    }
  }

  // Adding class to body based on role.
  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */

function devportal_preprocess_block(&$variables) {
  if ($program_id = \Drupal::service('opendevx_core.program_domain')->getProgramDomainId()) {
    $program = \Drupal::entityTypeManager()->getStorage('group')->load($program_id);
    if ($program instanceof GroupInterface) {
      if ($program->hasField('field_site_logo') && $program->field_site_logo->target_id) {
        $media = $program->field_site_logo->entity;
        if ($media && $media->hasField('field_media_image') && $media->field_media_image->entity) {
          $variables['site_logo_custom'] = file_create_url($media->field_media_image->entity->getFileUri());
          if ($variables['base_plugin_id'] == 'system_branding_block') {
            $variables['#cache']['max-age'] = 0;
            $variables['elements']['#cache']['max-age'] = 0;
          }
        }
      }
    }
  }
}
